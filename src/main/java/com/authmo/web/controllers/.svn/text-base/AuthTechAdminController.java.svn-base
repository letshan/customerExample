package com.authmo.web.controllers;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.omg.CORBA.portable.OutputStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.server.ServletServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.authmo.entities.AuthTech;
import com.authmo.entities.OwnerStore;
import com.authmo.service.AuthTechService;
import com.authmo.service.OwnerStoreService;
import com.authmo.utils.PdfGenerator;
import com.authmo.web.config.Config;
import com.authmo.web.response.QRCodeMessageConverter;
import com.authmo.web.response.QRCodeResponse; 

@Controller
@RequestMapping(value = "/admin")
public class AuthTechAdminController {
	@Autowired
    private AuthTechService service;
	@Autowired
    private OwnerStoreService storeService;
	
	
	@Autowired
	private Config config;
	
	@RequestMapping({"","/","/index","/adminhome"})
	public String adminhome(Model model) 
	{
		//List<User> blogs = userService.findAllUsers();
		//model.addAttribute("USERS", blogs);
		return "admin/adminhome";
	}
	@RequestMapping(value ="/stores",method =  RequestMethod.GET)
	public String stores(Model model) 
	{
		List<OwnerStore> stores = storeService.getAllStores();
		model.addAttribute("stores", stores);
		return "admin/stores";
	}
	@RequestMapping(value ="/editstore",method =  RequestMethod.GET)
	public String generateStore(@RequestParam(required=false) Integer storeId, Model model) 
	{   StoreGenerator storeGen = new StoreGenerator();
		if(storeId!=null && storeId>0){
			OwnerStore store = storeService.getById(storeId);
			if(store!=null){
				storeGen.setId(store.getId());
				storeGen.setName(store.getName());
				storeGen.setSkin(store.getSkin());
				storeGen.setAuthtechName(store.getAuthtechName());
			}
		}
		model.addAttribute("generator", storeGen);
		return "admin/editstore";
	}
	@RequestMapping(value ="/editstore",method =  RequestMethod.POST)
	public String generateStore(@ModelAttribute("generator") StoreGenerator storeGen, Model model) 
	{
		OwnerStore store = new OwnerStore();
		if(storeGen.getId()>0){store.setId(storeGen.getId());}
		store.setName(storeGen.getName());
		store.setSkin(storeGen.getSkin());
		store.setAuthtechName(storeGen.getAuthtechName());
		storeService.saveStore(store);
		List<OwnerStore> stores = storeService.getAllStores();
		model.addAttribute("stores", stores);
		return "admin/stores";
	}
	@RequestMapping(value = "/authtech_generate", method = RequestMethod.GET)
    public String generate(Model model) { 
		List<OwnerStore> stores = storeService.getAllStores();
		model.addAttribute("stores", stores);
		model.addAttribute("generator", new AuthTechGenerator(10,1));
		return "admin/authtech_generate";
    }
	@RequestMapping(value = "/commit", method = RequestMethod.POST)
	public String generate(@ModelAttribute("generator") AuthTechGenerator generator, Model model) { 
		String message = "";
		if(generator!=null&&generator.getStoreId()>0&&generator.getNumber()>0){
			List<AuthTech> list = service.saveGeneratedAuthTechs(generator.getStoreId(), service.generateUUID(generator.getNumber()));
			model.addAttribute("authtechs",list);
		}else{
			message = "No authtech generated.";
			model.addAttribute("message", message);
			List<OwnerStore> stores = storeService.getAllStores();
			model.addAttribute("stores", stores);
			model.addAttribute("generator", generator);
			return "admin/authtech_generate";
		}
		setStoreSelection(model,generator.getStoreId());
		return "admin/authtech_list";
    }
	
	@RequestMapping(value = "/authtech_list", method = RequestMethod.GET)
    public String list(@RequestParam(value="storeId",required=false) Integer storeId, @RequestParam(value="filterValidated",required=false) boolean filterValidated, Model model) {
		if(storeId==null||storeId==0){storeId =1;}
		setStoreSelection(model,storeId);
		List<AuthTech> list = service.getByOwnerIdAndValidated(storeId,filterValidated);
		model.addAttribute("authtechs",list.size()>15?list.subList(0,15):list);
		model.addAttribute("filterValidated",filterValidated);
		return "admin/authtech_list";
    }
	private void setStoreSelection(Model model, int storeId){
		List<OwnerStore> stores = storeService.getAllStores();
		model.addAttribute("selected_store",storeId);
		model.addAttribute("stores",stores);
	}
	/***
	 * handle pdf mime type by viewresolver 
	 * use mvc pattern 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/downloads/list", method = RequestMethod.GET)
    public String download(@RequestParam(value="storeId",required=false) Integer storeId, @RequestParam(value="filterValidated",required=false) boolean filterValidated,ModelMap model) { 
		if(storeId==null || storeId ==0){storeId=1;}
		List<AuthTech> list = service.getByOwnerIdAndValidated(storeId,filterValidated);
		if(list!=null){
			model.put("authtechs",list);
		}
		return "admin/downloads/list";
    }
	/***
	 * handle multiple mime type by viewresolver 
	 * use mvc pattern 
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/downloads/printcode", method = RequestMethod.GET)
    public String printcode(@RequestParam(value="storeId",required=false) Integer storeId, @RequestParam(value="filterValidated",required=false) boolean filterValidated,ModelMap model) { 
		if(storeId==null || storeId ==0){storeId=1;}
		List<AuthTech> list = service.getByOwnerIdAndValidated(storeId,filterValidated);
		if(list!=null){
			model.put("authtechs",list);
		}
		String baseUrl = config.getValue(config.QRCode_BaseURL, "http://localhost:8080/");
		String parameter = "?verifycode=";
		model.put("baseurl", baseUrl);
		model.put("urlparameter", parameter);
		return "admin/downloads/printcode";
    }
	

	/***
	 * old pdf generator code
	 * @param authtechCode
	 * @param outputMessage
	 */
	@Deprecated
	@RequestMapping(value = "/{authtechCode}/download", method = RequestMethod.GET)
	public void getPDFDownload(@PathVariable String authtechCode, HttpServletResponse outputMessage){
		String baseUrl = "http://localhost:8080/AuthtechPrototype/admin/";
		ServletOutputStream os =null;
		try {
			outputMessage.setContentType("application/pdf; charset=UTF-8");
			outputMessage.setHeader("Content-disposition", "inline; filename=\"" + authtechCode + ".pdf\"");
			os = outputMessage.getOutputStream(); 
			PdfGenerator.generatePDF(os, baseUrl, authtechCode );
		os.flush();
		os.close();
		} catch (IOException e) { 
			e.printStackTrace();
		} catch (Exception e) { 
			e.printStackTrace();
		}finally{
			if(os!=null){
				try {
					os.close();
				} catch (IOException e) { 
					e.printStackTrace();
				}
			}
		}
	}
}
class AuthTechGenerator{
	private int number;
	private int storeId;
	public AuthTechGenerator(){
		
	}
	public AuthTechGenerator(int number, int storeId){
		this.number = number;
		this.storeId = storeId;
	}
	 
	public int getNumber(){
		return number;
	}
	public void setNumber(int number){
		this.number = number;
	}
	public int getStoreId() {
		return storeId;
	}
	public void setStoreId(int storeId) {
		this.storeId = storeId;
	}
	
}
class StoreGenerator{
	private int id;
	private String name;
	private String skin;
	private String authtechName;
	public StoreGenerator(){}
	public StoreGenerator(int id,String name, String skin, String authtechName){
		this.id = id;
		this.name = name;
		this.skin = skin;
		this.authtechName = authtechName;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSkin() {
		return skin;
	}
	public void setSkin(String skin) {
		this.skin = skin;
	}
	public String getAuthtechName() {
		return authtechName;
	}
	public void setAuthtechName(String authtechName) {
		this.authtechName = authtechName;
	}
	
}